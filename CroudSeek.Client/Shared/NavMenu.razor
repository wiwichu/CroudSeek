@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject IAccessTokenProvider TokenProvider
@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager

<nav class="navbar navbar-expand-lg navbar-dark bg-dark ">
    <div class="container">
        <a class="navbar-brand" href="/">CroudSeek</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarResponsive" aria-controls="navbarResponsive" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarResponsive">
            <ul class="navbar-nav ml-auto">
                <!--<li class="nav-item">-->
@*                    <NavLink class="nav-link" href="/" Match="NavLinkMatch.All"></NavLink>*@
                <!--</li>-->
                <AuthorizeView>
                    <Authorized>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">Home</NavLink>
                        </li>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="/questoverview">Quests</NavLink>
                        </li>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="/zoneoverview">Zones</NavLink>
                        </li>
                    </Authorized>
                </AuthorizeView>
                <AuthorizeView Policy="@CroudSeek.Shared.Policies.CanManageQuests">
                    <Authorized>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="/questedit">Add/Edit quest</NavLink>
                        </li>
                    </Authorized>
                </AuthorizeView>
                <AuthorizeView>
                    <Authorized>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="/viewedit">Add/Edit view</NavLink>
                        </li>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="/datapointedit">Add/Edit datapoint</NavLink>
                        </li>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="/zoneedit">Add/Edit zone</NavLink>
                        </li>
                        <li class="nav-item">
                            <button class="nav-link bg-transparent text-danger"
                                    @onclick="BeginSignOut">
                                <span class="oi oi-list-rich" aria-hidden="true"></span>Log out (@context.User.Identity.Name)
                                </button>
                        </li>

                @*<li class="nav-item">
                    <button class="nav-link"
                            @onclick="WriteToken">Write token</button>
                </li>*@
                    </Authorized>
                    <NotAuthorized>
                        <li class="nav-item">
                            <NavLink class="nav-link"
                                     href="authentication/login">Log in</NavLink>
                        </li>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="https://localhost:5003/Identity/Account/Register">Register</NavLink>
                        </li>
                    </NotAuthorized>
                </AuthorizeView>
            </ul>
        </div>
    </div>
</nav>


@code{
    private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }

    private async Task WriteToken()
    {
        var tokenResult = await TokenProvider.RequestAccessToken();
        if (tokenResult.TryGetToken(out var token))
        {
            System.Diagnostics.Debug.WriteLine(token.Value);
        }
    }

}
